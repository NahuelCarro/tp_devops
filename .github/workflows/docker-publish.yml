name: Build & Push Docker Images
#Prueba de GitHub Actions para construir y publicar im√°genes Docker multi-arquitectura
on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build & Push ${{ matrix.target }} (${{ matrix.arch_tag }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - target: api
            arch: linux/amd64
            arch_tag: amd64
          - target: api
            arch: linux/arm64
            arch_tag: arm64
          - target: frontend
            arch: linux/amd64
            arch_tag: amd64
          - target: frontend
            arch: linux/arm64
            arch_tag: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache npm dependencies (only for frontend)
        if: matrix.target == 'frontend'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('status-page/package.json', 'status-page/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Build & Push Image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.target == 'api' && '.' || './status-page' }}
          file: ${{ matrix.target == 'api' && './Dockerfile' || './status-page/Dockerfile' }}
          platforms: ${{ matrix.arch }}
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/devops-${{ matrix.target }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/devops-${{ matrix.target }}:cache,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-${{ matrix.target }}:${{ github.sha }}-${{ matrix.arch_tag }}

  merge-manifest:
    name: Create & Push Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create & push manifest for API
        run: |
          docker buildx imagetools create \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/devops-api:latest \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/devops-api:${{ github.sha }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-api:${{ github.sha }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-api:${{ github.sha }}-arm64

      - name: Create & push manifest for Frontend
        run: |
          docker buildx imagetools create \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/devops-frontend:latest \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/devops-frontend:${{ github.sha }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-frontend:${{ github.sha }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-frontend:${{ github.sha }}-arm64

  deploy-render:
    runs-on: ubuntu-latest
    needs: merge-manifest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy API
        run: |
          HOOK="${{ secrets.RENDER_DEPLOY_HOOK_URL_API }}"
          SHA="${{ github.sha }}"
          URL="${HOOK}&imgURL=gastoncuevas/devops-api:${SHA}"
          echo "GitHub SHA: $SHA"
          echo "Hook URL length: ${#HOOK}"
          echo "Full URL length: ${#URL}"
          echo "Deploying API..."
          curl -fsSL "$URL" || echo "Curl failed with exit code: $?"

      - name: Deploy Frontend
        run: |
          URL="${{ secrets.RENDER_DEPLOY_HOOK_URL_FRONTEND }}&imgURL=${{ secrets.DOCKERHUB_USERNAME }}/devops-frontend:${{ github.sha }}"
          echo "Deploying Frontend with URL: $URL"
          curl -fsSL "$URL"
